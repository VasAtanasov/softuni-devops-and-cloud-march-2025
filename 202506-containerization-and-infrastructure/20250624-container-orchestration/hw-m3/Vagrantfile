# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'ipaddr'

# ---------------- Settings ----------------
SETTINGS = {
  BOX_NAME: 'shekeriev/debian-12.11',
  MEMORY: 2048,
  CPUS: 1,
  SUBNET: '192.168.10.0/24',
  MANAGERS: 1,
  WORKERS: 2,
  SHARED_DIR: '/vagrant'
}

ASSETS = File.join(File.dirname(__FILE__), 'assets')
TOTAL = SETTINGS[:MANAGERS] + SETTINGS[:WORKERS]
IP_START = 201
DEBUG = ENV['DEBUG'] == 'true'
LEADER_INDEX = 0

puts '[INFO] DEBUG MODE ENABLED' if DEBUG

# ---------------- Helpers ----------------
def ips(subnet, start, count)
  base = IPAddr.new(subnet).to_range.first.to_s.split('.')
  (start...(start + count)).map { |i| (base[0..2] + [i]).join('.') }
end

def host_entries(role, count, offset, ips)
  (1..count).map { |i| "#{ips[offset + i - 1]} #{role}#{i}.do1.hw #{role}#{i}" }
end

ips_list = ips(SETTINGS[:SUBNET], IP_START, TOTAL)
hosts = host_entries('manager', SETTINGS[:MANAGERS], 0, ips_list) +
        host_entries('worker', SETTINGS[:WORKERS], SETTINGS[:MANAGERS], ips_list)

# ---------------- Vagrant Config ----------------
Vagrant.configure('2') do |config|

  config.vm.provider :virtualbox do |vb|
    vb.customize ['modifyvm', :id, '--memory', SETTINGS[:MEMORY]]
    vb.customize ['modifyvm', :id, '--cpus', SETTINGS[:CPUS]]
    vb.customize ['modifyvm', :id, '--groups', '/swarm']
  end

  config.vm.provision :file, source: "#{ASSETS}/logo", destination: '/tmp/logo'

  config.vm.provision "Bootstrap", type: :shell do |shell|
    shell.path = "bootstrap.sh"
    shell.env = { "HOST_ENTRIES" => hosts.join('\n') }
  end

  config.vm.provision 'Install Docker', type: :shell do |shell|
    shell.path = 'docker-setup.sh'
  end

  # ---------------- Define Manager Nodes ----------------
  SETTINGS[:MANAGERS].times do |i|
    name = "manager#{i + 1}"
    ip = ips_list[i]
    puts "#{ip} #{name}" if DEBUG

    config.vm.define name do |manager|
      manager.vm.box = SETTINGS[:BOX_NAME]
      manager.vm.network :private_network, ip: ip
      manager.vm.hostname = "#{name}.local"

      manager.vm.provider :virtualbox do |vb|
        vb.name = name
      end

      manager.vm.provision 'Init docker swarm', type: :shell do |shell|
        shell.inline = "docker swarm init --advertise-addr #{ip}"
      end if i == LEADER_INDEX

      manager.vm.provision 'Extract worker token', type: :shell do |shell|
        puts "Saving worker token at #{SETTINGS[:SHARED_DIR]}/worker.token" if DEBUG
        shell.inline = "docker swarm join-token -q worker > #{SETTINGS[:SHARED_DIR]}/worker.token"
      end if i == LEADER_INDEX

      manager.vm.provision 'Extract manager token', type: "shell" do |shell|
        puts "Saving manager token at #{SETTINGS[:SHARED_DIR]}/manager.token" if DEBUG
        shell.inline = "docker swarm join-token -q manager > #{SETTINGS[:SHARED_DIR]}/manager.token"
      end if i == LEADER_INDEX

      manager.vm.provision 'Join manager to swarm', type: :shell do |shell|
        puts "Joining #{name} to docker swarm" if DEBUG
        shell.inline = <<~SCRIPT
          docker swarm join --token $(cat #{SETTINGS[:SHARED_DIR]}/manager.token) --advertise-addr #{ip} #{ips_list[LEADER_INDEX]}:2377
        SCRIPT
      end unless i == LEADER_INDEX

      manager.vm.synced_folder "registry_data", "/mnt/registry", create: true
      manager.vm.provision 'Provision Swarm Leader', type: :shell do |shell|
        puts "Provisioning Services on Swarm Leader - #{name}" if DEBUG
        shell.path = 'provision-swarm.sh'
        manager.vm.network :forwarded_port, guest: 5000, host: 5000, auto_correct: true
        manager.vm.network :forwarded_port, guest: 8001, host: 8001, auto_correct: true
        manager.vm.network :forwarded_port, guest: 9443, host: 9443, auto_correct: true
      end if i == LEADER_INDEX

      manager.vm.provision 'Install docker tools', type: :shell do |shell|
        shell.path = 'docker-tools.sh'
        shell.env = {
          'INSTALL_LAZYDOCKER' => 'false',
          'INSTALL_DIVE' => 'false',
          'INSTALL_DRY' => 'true',
          'INSTALL_TRIVY' => 'false',
          'INSTALL_HADOLINT' => 'false',
          'INSTALL_PUSHRM' => 'false',
        }
      end

      manager.vm.provision 'Wait for swarm and deploy', type: :shell, privileged: true do |shell|
        manager.vm.network :forwarded_port, guest: 8081, host: 8081, auto_correct: true
        manager.vm.network :forwarded_port, guest: 3306, host: 3306, auto_correct: true

        shell.env = {
          'EXPECTED_NODES' => TOTAL.to_s,
          'DOCKER_COMPOSE_FILE' => "#{SETTINGS[:SHARED_DIR]}/bgapp/docker-compose.yaml",
          'DOCKER_COMPOSE_ENV_FILE' => "#{SETTINGS[:SHARED_DIR]}/bgapp/.env",
          'STACK_NAME' => "bgapp"
        }
        shell.inline = <<~SCRIPT
          DB_SECRET=$(openssl rand -hex 16)
          echo "$DB_SECRET" | docker secret create db_root_password -

          tmux new-session -d -s deploy_stack 'bash #{SETTINGS[:SHARED_DIR]}/deploy-stack.sh; bash'
        SCRIPT
      end if i == LEADER_INDEX

      manager.trigger.before :destroy do |trigger|
        trigger.name = "Clean host files"
        trigger.run = {
          inline: <<~POWERSHELL,
            @("manager.token", "worker.token", "registry_data") | ForEach-Object {
              if (Test-Path $_) { Remove-Item $_ -Recurse -Force }
            }
          POWERSHELL
        }
      end if i == LEADER_INDEX

    end
  end

  # ---------------- Define Worker Nodes ----------------
  SETTINGS[:WORKERS].times do |i|
    index = SETTINGS[:MANAGERS] + i
    name = "worker#{i + 1}"
    ip = ips_list[index]
    puts "#{ip} #{name}" if DEBUG

    config.vm.define name do |node|
      node.vm.box = SETTINGS[:BOX_NAME]
      node.vm.hostname = "#{name}.local"
      node.vm.network :private_network, ip: ip

      node.vm.provider :virtualbox do |vb|
        vb.name = name
      end

      node.vm.provision 'Join worker to swarm', type: :shell do |shell|
        puts "Joining #{name} to docker swarm" if DEBUG
        shell.inline = <<~SCRIPT
          docker swarm join --token $(cat #{SETTINGS[:SHARED_DIR]}/worker.token) --advertise-addr #{ip} #{ips_list[LEADER_INDEX]}:2377
        SCRIPT
      end

    end
  end

end